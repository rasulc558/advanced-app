{
  "compilerOptions": {
    // То куда будет сборка. В нашем случае это не важно, так как webpack собирает
    "outDir": "./dist/",
    // Подсвит тех мест где явно не указан тип
    "noImplicitAny": true,
    // Какая модульная система будет использоваться
    "module": "ESNext",
    // В какую спецификацию компилируем
    "target": "es5",
    // Даем понять компилятору что будем использовать jsx как в реакте 
    // (может требовать импортировать реакт в каждом файле, поэтому добави "react-jsx")
    "jsx": "react-jsx",
    // Компилято (TS) будет обрабатывать js вместе с ts
    "allowJs": true,
    // То какие импорты будут node/classic в 90% будет node
    "moduleResolution": "node",
    // Позволяет работать с пакетами, которые используют common js (requer() module.export) как с обычными пакетами с помощью import/export
    "esModuleInterop": true,
    // Если библиотека не имеет дефолтного импорта, то данная строка позволяет сделать его вместо того чтобы писать 'import * as React from...' можно написать 'import React from 'react'
    "allowSyntheticDefaultImports": true,
    // Для абсолютного импорта
    "baseUrl": ".",
    // Говорим что абсолютные экспорты и импорты будут идти из
    "paths": {
      "*": [
        "./src/*"
      ]
    },
    // Cкопировал отсюда https://habr.com/ru/post/557738/
    // "alwaysStrict": true,
    // "noImplicitAny": true,
    // Данная опция не позволит передвать и импортировать данные с типом null,  undefined,
    // "strictNullChecks": true,
    // "strictPropertyInitialization": true,
    // "strictFunctionTypes": true,
    // "noImplicitThis": true,
    // "strictBindCallApply": true,
  },
  // Так как ts-node поддерживает только commonJs ипорты, то при использовании webpack.config.ts мы не можем использовать современные import/export поэтому ставим опцию:
  "ts-node": {
    "compilerOptions": {
      "module": "CommonJS"
    }
  }
}